# -*- coding: utf-8 -*-
"""LifeExpectancy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aMt5bsVLnjkjjlK_RuRKSkLwf6yDDrEn

## Pre-processing
"""

import pandas as pd

data_life = pd.read_csv('/content/life_expectancy_years.csv')
data_life.head()

data_life.info()

data_life.describe()

"""Jika ingin mencari suatu negara di dalam data, maka bisa melakukan code seperti dibawah"""

Canada = data_life['country'] == 'Canada'
data_life[Canada]

"""Membuat variabel baru yang berisi data-data pada negara Canada.

data_life.iloc[30][1:].values

.iloc[30] digunakan untuk mencari baris ke 30 pada data

[1:] digunakan untuk memberi range data dari kolom pertama hingga terakhir

.values digunakan untuk menginput hanya value atau isi dari kolom yang sudah beri range
"""

Can_life_expectancy = data_life.iloc[30][1:].values
print(Can_life_expectancy)

"""Membuat array baru untuk tahun berdasarkan kolom tahun di data life expectancy"""

import numpy as np

tahun = np.array(range(int(data_life.columns[1:].min()), int(data_life.columns[1:].max()) + 1))

print(tahun)

import matplotlib.pyplot as plt

plt.plot(tahun, Can_life_expectancy, 'r*')
plt.show()

"""Berdasarkan plot diatas, terjadi peningkatan umur dinegara Canada setiap tahunnya"""

Indonesia = data_life['country'] == 'Indonesia'
data_life[Indonesia]

Idn_life_expectancy = data_life.iloc[77][1:].values
print(Idn_life_expectancy)

tahunId = np.array(range(int(data_life.columns[1:].min()), int(data_life.columns[1:].max()) + 1))
print(tahunId)

plt.plot(tahunId, Idn_life_expectancy, 'r*')
plt.show()

"""## Training and Test Model
Pada bagian ini, digunakan untuk melakukan prediksi umur berdasarkan data-data yang sudah ada

sklearn dapat digunakan untuk melakukan prediksi dengan cara membagi data menjadi 2 yaitu untuk training dan untuk testing

Yang pertama dilakukan yaitu membuat data frame baru untuk negara Canada
"""

from sklearn.model_selection import train_test_split

df_can = pd.DataFrame()
df_can['Tahun'] = tahun
df_can['Life Expectancy'] = Can_life_expectancy
df_can.head()

"""Membagi data yang sebelumnya dibuat menjadi data training dan testing.

Biasanya data testing sebesar 0.3 dari data yang ada
"""

X = df_can[['Tahun']] #feature
y = df_can['Life Expectancy'] # target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 50)
# X_train feature training
# X_test feature test
# y_train target training
# y_train feature test

"""print shape dari masing-masing data untuk melihat total data x dan y bagian training maupun testing. Total data x ditraining harus memiliki nilai yang sama dengan y training, begitu juga dengan test. sehingga tidak ada data yang tidak seimbang"""

print('Original Data Feature : ', X.shape)
print('Original Target Data : ', y.shape)

print('Training Data Feature : ', X_train.shape)
print('Target Data (Training) : ', y_train.shape)

print('Testing Data Feature : ', X_test.shape)
print('Target Data (Testing) : ', y_test.shape)

X_train.head()

y_train.head()

X_test.head()

y_test.head()

df_Id = pd.DataFrame()
df_Id['Tahun'] = tahunId
df_Id['Life Expectancy'] = Idn_life_expectancy
df_Id.head()

XId = df_Id[['Tahun']] #feature
yId = df_Id['Life Expectancy'] # target

X_trainId, X_testId, y_trainId, y_testId = train_test_split(X, y, test_size = 0.3, random_state = 50)
# X_train feature training
# X_test feature test
# y_train target training
# y_train feature test

print('Original Data Feature : ', XId.shape)
print('Original Target Data : ', yId.shape)

print('Training Data Feature : ', X_trainId.shape)
print('Target Data (Training) : ', y_trainId.shape)

print('Testing Data Feature : ', X_testId.shape)
print('Target Data (Testing) : ', y_testId.shape)

X_trainId.head()

y_trainId.head()

X_testId.head()

y_testId.head()

"""## Modeling"""

from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(X_train, y_train)

model.coef_, model.intercept_

prediksi = model.predict(X_test)
prediksi

y_test

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_test, prediksi)
print('Nilai MSE: ', mse)

rmse = mean_squared_error(y_test, prediksi, squared = False)
print('Nilai RMSE: ', rmse)

modelId = LinearRegression()

modelId.fit(X_trainId, y_trainId)

modelId.coef_, modelId.intercept_

prediksiId = modelId.predict(X_testId)
prediksiId

y_testId

mseID = mean_squared_error(y_testId, prediksiId)
print('Nilai MSE : ', mseID)

rmseId = mean_squared_error(y_testId, prediksiId, squared = False)
print('Nilai RMSE : ', rmseId)

"""## Visualisasi"""

x_line = [[df_can['Tahun'].min()], [df_can['Tahun'].max()]]
y_line = model.predict(x_line)

plt.plot(df_can['Tahun'], df_can['Life Expectancy'], 'r*')
plt.plot(x_line, y_line, 'g-')
plt.show

x_lineId = [[df_Id['Tahun'].min()], [df_Id['Tahun'].max()]]
y_lineId = modelId.predict(x_lineId)


plt.plot(df_Id['Tahun'], df_Id['Life Expectancy'], 'r*')
plt.plot(x_lineId, y_lineId, 'g-')
plt.show

"""## Sum of Squares"""

ss_resCan = ((y_test - prediksi) ** 2).sum(axis = 0)
ss_resCan

ss_resId = ((y_testId - prediksiId) ** 2).sum(axis = 0)
ss_resId

"""## Total Sum of Squares"""

y_mean = np.average(y_test, axis = 0)

SST_Can = ((y_test - y_mean)**2).sum(axis = 0)
SST_Can

y_meanId = np.average(y_testId, axis = 0)
y_meanId

SST_Id = ((y_testId - y_meanId) ** 2).sum(axis = 0)
SST_Id

"""## R Squared

Setelah mengihtung Sum of Squared dan Total Sum of Squared, dilanjutkan dengan menghitung nilai dari R squared atau koefisien determinasi

 Nilai R Squared yang baik adalah nilai yang mendekati 1
"""

#R2 = 1 - (SSR/SST)

RCan = 1 - (ss_resCan / SST_Can)
RCan

#Atau dengan import library dari sklearn
from sklearn.metrics import r2_score

print(r2_score(y_test, prediksi))

"""Berdasarkan hasil perhitungan R2 score diatas, menunjukkan model prediksi life expectancy di Canada memiliki tingkat akurasi sangat tinggi. Akurasi tinggi tersebut ditunjukkan dengan nilai R2 sebesar 0.9656."""

RId = 1 - (ss_resId / SST_Id)
RId

print(r2_score(y_testId, prediksiId))

"""Berdasarkan hasil perhitungan R2 score diatas, menunjukkan model prediksi life expectancy di Indonesia memiliki tingkat akurasi yang baik dengan nilai R2 sebesar 0.8767."""